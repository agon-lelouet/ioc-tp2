#include <linux/fs.h>

static int major;

static int 
open_ledbp(struct inode *inode, struct file *file) {
  printk(KERN_DEBUG "open()\n");
  return 0;
}

static ssize_t 
read_ledbp(struct file *file, char *buf, size_t count, loff_t *ppos) {
  printk(KERN_DEBUG "read()\n");
  return count;
}

static ssize_t 
write_ledbp(struct file *file, const char *buf, size_t count, loff_t *ppos) {
  printk(KERN_DEBUG "write()\n");
  return count;
}

static int 
release_ledbp(struct inode *inode, struct file *file) {
  printk(KERN_DEBUG "close()\n");
  return 0;
}

struct file_operations fops_ledbp =
  {
    .open       = open_ledbp,
    .read       = read_ledbp,
    .write      = write_ledbp,
    .release    = release_ledbp 
  };


static int __init ledbp_init(void)
{
  major = register_chrdev(0, "ledbp", &fops_ledbp);
  printk(KERN_DEBUG "Insertion !\n");
  return 0;
}

static void __exit ledbp_exit(void)
{
  unregister_chrdev(major, "ledbp");
  printk(KERN_DEBUG "Enl√®vement !\n");
}

module_init(ledbp_init);
module_exit(ledbp_exit);
